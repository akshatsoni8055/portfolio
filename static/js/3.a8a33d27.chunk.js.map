{"version":3,"sources":["components/Header.jsx","components/utils/hooks.js","components/Experience.jsx"],"names":["Header","props","title","_jsx","className","children","useCheckMobileScreen","_useState","useState","window","innerWidth","_useState2","_slicedToArray","width","setWidth","handleWindowSizeChange","useEffect","addEventListener","removeEventListener","styles","ulStyle","listStylePosition","paddingLeft","subtitleContainerStyle","marginTop","marginBottom","subtitleStyle","display","inlineChild","itemStyle","dateStyle","marginLeft","bodyContainerStyle","Experience","theme","useContext","ThemeContext","header","data","setData","fetch","endpoints","experiences","method","then","res","json","catch","err","isMobile","_jsxs","_Fragment","Container","Timeline","lineColor","timelineLineColor","map","item","Fade","TimelineItem","dateText","dateInnerStyle","background","accentColor","style","Object","assign","color","_objectSpread","subtitle","workType","workDescription","point","ReactMarkdown","components","p","FallbackSpinner"],"mappings":"iIAAA,6BAaeA,UATf,SAAgBC,GACd,IAAQC,EAAUD,EAAVC,MACR,OAAOC,cAAA,OAAKC,UAAU,SAAQC,SAAEH,GAClC,C,gHCLaI,EAAuB,WAChC,IAAAC,EAA0BC,mBAASC,OAAOC,YAAWC,EAAAC,YAAAL,EAAA,GAA9CM,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAChBI,EAAyB,WAC3BD,EAASL,OAAOC,WACpB,EASA,OAPAM,qBAAU,WAEN,OADAP,OAAOQ,iBAAiB,SAAUF,GAC3B,WACHN,OAAOS,oBAAoB,SAAUH,EACzC,CACJ,GAAG,IAEKF,GAAS,GACrB,C,sKCHMM,EAAS,CACbC,QAAS,CACPC,kBAAmB,UACnBC,YAAa,IAEfC,uBAAwB,CACtBC,UAAW,GACXC,aAAc,IAEhBC,cAAe,CACbC,QAAS,gBAEXC,YAAa,CACXD,QAAS,gBAEXE,UAAW,CACTJ,aAAc,IAEhBK,UAAW,CACTjB,MAAO,QACPkB,WAAY,QAEdC,mBAAoB,CAClBnB,MAAO,UAsFIoB,UAlFf,SAAoBhC,GAClB,IAAMiC,EAAQC,qBAAWC,KACjBC,EAAWpC,EAAXoC,OACR9B,EAAwBC,mBAAS,MAAKG,EAAAC,YAAAL,EAAA,GAA/B+B,EAAI3B,EAAA,GAAE4B,EAAO5B,EAAA,GAEpBK,qBAAU,WACRwB,MAAMC,IAAUC,YAAa,CAC3BC,OAAQ,QAEPC,MAAK,SAACC,GAAG,OAAKA,EAAIC,MAAM,IACxBF,MAAK,SAACC,GAAG,OAAKN,EAAQM,EAAIH,YAAY,IACtCK,OAAM,SAACC,GAAG,OAAKA,CAAG,GACvB,GAAG,IAEH,IAAMC,EAAW3C,iCAEjB,OACE4C,eAAAC,WAAA,CAAA9C,SAAA,CACEF,cAACH,UAAM,CAACE,MAAOmC,IAEdC,EAEGnC,cAAA,OAAKC,UAAU,4BAA2BC,SACxCF,cAACiD,IAAS,CAAA/C,SACRF,cAACkD,WAAQ,CACPC,UAAWpB,EAAMqB,kBAAkBlD,SAElCiC,EAAKkB,KAAI,SAACC,GAAI,OACbtD,cAACuD,IAAI,CAAArD,SACH6C,eAACS,eAAY,CAEXC,SAAUH,EAAKG,SACf9B,UAAWmB,EAAW,CAAC,EAAI9B,EAAOW,UAClC+B,eAAgB,CAAEC,WAAY5B,EAAM6B,aACpCC,MAAO7C,EAAOU,UACdG,mBAAoBiC,OAAOC,OAAO,CAAEC,MAAOjC,EAAMiC,OAASlB,EAAW,CAAC,EAAI9B,EAAOa,oBAAoB3B,SAAA,CAErGF,cAAA,MAAIC,UAAU,aAAYC,SACvBoD,EAAKvD,QAERgD,eAAA,OAAKc,MAAO7C,EAAOI,uBAAuBlB,SAAA,CACxCF,cAAA,MAAI6D,MAAKI,wBAAA,GAAOjD,EAAOO,eAAa,IAAEyC,MAAOjC,EAAM6B,cAAc1D,SAC9DoD,EAAKY,WAEPZ,EAAKa,UACJpB,eAAA,MAAIc,MAAO7C,EAAOS,YAAYvB,SAAA,CAAC,WAE5B,IACAoD,EAAKa,eAIZnE,cAAA,MAAI6D,MAAO7C,EAAOC,QAAQf,SACvBoD,EAAKc,gBAAgBf,KAAI,SAACgB,GAAK,OAC9BtB,eAAA,OAAA7C,SAAA,CACEF,cAAA,MAAAE,SACEF,cAACsE,IAAa,CACZpE,SAAUmE,EACVE,WAAY,CACVC,EAAG,YAITxE,cAAA,WATQqE,EAUJ,QAlCLf,EAAKvD,MAAQuD,EAAKG,WAsCpB,UAKbzD,cAACyE,UAAe,MAG5B,C","file":"static/js/3.a8a33d27.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../App.css';\n\nfunction Header(props) {\n  const { title } = props;\n  return <div className=\"header\">{title}</div>;\n}\n\nHeader.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Header;\n","import React, { useEffect, useState } from \"react\";\n\nexport const useCheckMobileScreen = () => {\n    const [width, setWidth] = useState(window.innerWidth);\n    const handleWindowSizeChange = () => {\n        setWidth(window.innerWidth);\n    }\n\n    useEffect(() => {\n        window.addEventListener('resize', handleWindowSizeChange);\n        return () => {\n            window.removeEventListener('resize', handleWindowSizeChange);\n        }\n    }, []);\n\n    return (width <= 768);\n}\n","import React, { useEffect, useState, useContext } from 'react';\nimport { Timeline, TimelineItem } from 'vertical-timeline-component-for-react';\nimport { Container } from 'react-bootstrap';\nimport ReactMarkdown from 'react-markdown';\nimport PropTypes from 'prop-types';\nimport { ThemeContext } from 'styled-components';\nimport Fade from 'react-reveal';\nimport Header from './Header';\nimport endpoints from '../constants/endpoints';\nimport FallbackSpinner from './FallbackSpinner';\nimport '../css/experience.css';\nimport { useCheckMobileScreen } from './utils/hooks';\n\nconst styles = {\n  ulStyle: {\n    listStylePosition: 'outside',\n    paddingLeft: 20,\n  },\n  subtitleContainerStyle: {\n    marginTop: 10,\n    marginBottom: 10,\n  },\n  subtitleStyle: {\n    display: 'inline-block',\n  },\n  inlineChild: {\n    display: 'inline-block',\n  },\n  itemStyle: {\n    marginBottom: 10,\n  },\n  dateStyle: {\n    width: '200px',\n    marginLeft: '20px'\n  },\n  bodyContainerStyle: {\n    width: '700px',\n  }\n};\n\nfunction Experience(props) {\n  const theme = useContext(ThemeContext);\n  const { header } = props;\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    fetch(endpoints.experiences, {\n      method: 'GET',\n    })\n      .then((res) => res.json())\n      .then((res) => setData(res.experiences))\n      .catch((err) => err);\n  }, []);\n\n  const isMobile = useCheckMobileScreen();\n\n  return (\n    <>\n      <Header title={header} />\n\n      {data\n        ? (\n          <div className=\"section-content-container\">\n            <Container>\n              <Timeline\n                lineColor={theme.timelineLineColor}\n              >\n                {data.map((item) => (\n                  <Fade>\n                    <TimelineItem\n                      key={item.title + item.dateText}\n                      dateText={item.dateText}\n                      dateStyle={isMobile ? {} : styles.dateStyle}\n                      dateInnerStyle={{ background: theme.accentColor }}\n                      style={styles.itemStyle}\n                      bodyContainerStyle={Object.assign({ color: theme.color }, isMobile ? {} : styles.bodyContainerStyle)}\n                    >\n                      <h2 className=\"item-title\">\n                        {item.title}\n                      </h2>\n                      <div style={styles.subtitleContainerStyle}>\n                        <h4 style={{ ...styles.subtitleStyle, color: theme.accentColor }}>\n                          {item.subtitle}\n                        </h4>\n                        {item.workType && (\n                          <h5 style={styles.inlineChild}>\n                            &nbsp;Â·\n                            {' '}\n                            {item.workType}\n                          </h5>\n                        )}\n                      </div>\n                      <ul style={styles.ulStyle}>\n                        {item.workDescription.map((point) => (\n                          <div key={point}>\n                            <li>\n                              <ReactMarkdown\n                                children={point}\n                                components={{\n                                  p: 'span',\n                                }}\n                              />\n                            </li>\n                            <br />\n                          </div>\n                        ))}\n                      </ul>\n                    </TimelineItem>\n                  </Fade>\n                ))}\n              </Timeline>\n            </Container>\n          </div>\n        ) : <FallbackSpinner />}\n    </>\n  );\n}\n\nExperience.propTypes = {\n  header: PropTypes.string.isRequired,\n};\n\nexport default Experience;\n"],"sourceRoot":""}